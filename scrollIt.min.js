(function ($) {
    "use strict";
  
    // Default settings
    const defaults = {
      upKey: 38, // Key code for the up arrow key
      downKey: 40, // Key code for the down arrow key
      easing: "linear", // Easing function for animation
      scrollTime: 600, // Duration of scroll animation in milliseconds
      activeClass: "active", // Class to add to the active nav item
      onPageChange: null, // Callback function for when the page changes
      topOffset: 0, // Offset from the top of the page
    };
  
    $.scrollIt = function (options) {
      // Merge user options with default settings
      const settings = $.extend({}, defaults, options);
  
      // Current section index
      let currentIndex = 0;
  
      // Get the last section index
      const maxIndex = $("[data-scroll-index]:last").attr("data-scroll-index");
  
      // Function to scroll to a specific section
      const scrollToSection = (index) => {
        if (index < 0 || index > maxIndex) return;
  
        const targetOffset = $("[data-scroll-index=" + index + "]").offset().top + settings.topOffset + 1;
        $("html,body").animate({ scrollTop: targetOffset }, settings.scrollTime, settings.easing);
      };
  
      // Function to handle click events on nav items
      const handleNavClick = (event) => {
        const target = $(event.target).closest("[data-scroll-nav]").attr("data-scroll-nav") ||
                       $(event.target).closest("[data-scroll-goto]").attr("data-scroll-goto");
        scrollToSection(parseInt(target));
      };
  
      // Function to handle keydown events for up/down navigation
      const handleKeydown = (event) => {
        const key = event.which;
        if ($("html,body").is(":animated") && (key === settings.upKey || key === settings.downKey)) {
          return false;
        }
  
        if (key === settings.upKey && currentIndex > 0) {
          scrollToSection(currentIndex - 1);
          return false;
        } else if (key === settings.downKey && currentIndex < maxIndex) {
          scrollToSection(currentIndex + 1);
          return false;
        }
        return true;
      };
  
      // Function to update the active nav item
      const updateActiveNav = (index) => {
        if (settings.onPageChange && index && currentIndex !== index) settings.onPageChange(index);
  
        currentIndex = index;
        $("[data-scroll-nav]").removeClass(settings.activeClass);
        $("[data-scroll-nav=" + index + "]").addClass(settings.activeClass);
      };
  
      // Function to check the current scroll position and update the active nav item
      const checkScrollPosition = () => {
        const scrollTop = $(window).scrollTop();
        const section = $("[data-scroll-index]").filter((i, element) => {
          return (
            scrollTop >= $(element).offset().top + settings.topOffset &&
            scrollTop < $(element).offset().top + settings.topOffset + $(element).outerHeight()
          );
        });
  
        const newIndex = section.first().attr("data-scroll-index");
        updateActiveNav(newIndex);
      };
  
      // Bind events
      $(window).on("scroll", checkScrollPosition).scroll();
      $(window).on("keydown", handleKeydown);
      $("body").on("click", "[data-scroll-nav], [data-scroll-goto]", (event) => {
        event.preventDefault();
        handleNavClick(event);
      });
    };
  })(jQuery);
  